{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { loadingStart, loadingFailed } from 'utils/redux.loading';\nimport debugHand from 'debugData/debugHand.json';\n\nconst getInitialState = key => {\n  switch (key) {\n    case 'debug':\n      return debugHand;\n\n    default:\n      return [];\n  }\n};\n\nconst yourHand = createSlice({\n  name: 'yourHand',\n  initialState: getInitialState('debug'),\n  reducers: {\n    initYourHandFailure: loadingFailed,\n    initYourHandStart: loadingStart,\n    initYourHandSuccess: state => {\n      state.isLoading = false;\n    },\n\n    addCardToYourHand(state, {\n      payload\n    }) {\n      const {\n        item,\n        i\n      } = payload;\n      let newArray = state.slice();\n      newArray.splice(i, 0, item);\n      return newArray;\n    },\n\n    playSpellFromYourHand(state, {\n      payload\n    }) {\n      const {\n        item\n      } = payload;\n      console.log(item);\n    },\n\n    removeCardFromYourHand(state, {\n      payload\n    }) {\n      const {\n        id\n      } = payload;\n      return state.filter(item => item.id !== id);\n    },\n\n    updateCardInYourHand(state, {\n      payload\n    }) {\n      const {\n        item,\n        i\n      } = payload;\n      return state.map((entry, index) => {\n        // This isn't the entry we care about - keep it as-is\n        if (index !== i) return entry; // Otherwise, this is the one we want - return an updated value\n\n        return _objectSpread({}, entry, {}, item);\n      });\n    }\n\n  }\n});\nconst {\n  actions,\n  reducer\n} = yourHand;\nexport const {\n  initYourHandFailure,\n  initYourHandStart,\n  initYourHandSuccess,\n  addCardToYourHand,\n  playSpellFromYourHand,\n  removeCardFromYourHand\n} = actions; // const fetchMapDroneImagesFromNeighborhoods = data => {\n//   return data;\n// }\n// export const initLayout = () => async dispatch => {\n//   try {\n//     dispatch(initLayoutStart());\n//     const footerHeight = await getFooterHeight();\n//     dispatch(initLayoutSuccess(footerHeight));\n//   } catch (err) {\n//     dispatch(initLayoutFailure(err));\n//     // recursive failure init\n//     setTimeout(() => {\n//       dispatch(initLayout());\n//     }, 2000);\n//   }\n// };\n\nexport default reducer;","map":{"version":3,"sources":["/Users/william.pansky/www/hsclone/src/features/yourHand/yourHand.slice.js"],"names":["createSlice","loadingStart","loadingFailed","debugHand","getInitialState","key","yourHand","name","initialState","reducers","initYourHandFailure","initYourHandStart","initYourHandSuccess","state","isLoading","addCardToYourHand","payload","item","i","newArray","slice","splice","playSpellFromYourHand","console","log","removeCardFromYourHand","id","filter","updateCardInYourHand","map","entry","index","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,qBAA5C;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,eAAe,GAAGC,GAAG,IAAI;AAC7B,UAAQA,GAAR;AACE,SAAK,OAAL;AACE,aAAOF,SAAP;;AAEF;AACE,aAAO,EAAP;AALJ;AAOD,CARD;;AAUA,MAAMG,QAAQ,GAAGN,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAE,UADqB;AAE3BC,EAAAA,YAAY,EAAEJ,eAAe,CAAC,OAAD,CAFF;AAG3BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAER,aADb;AAERS,IAAAA,iBAAiB,EAAEV,YAFX;AAGRW,IAAAA,mBAAmB,EAAEC,KAAK,IAAI;AAC5BA,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACD,KALO;;AAMRC,IAAAA,iBAAiB,CAACF,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,EAAqB;AACpC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAcF,OAApB;AACA,UAAIG,QAAQ,GAAGN,KAAK,CAACO,KAAN,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgBH,CAAhB,EAAmB,CAAnB,EAAsBD,IAAtB;AACA,aAAOE,QAAP;AACD,KAXO;;AAYRG,IAAAA,qBAAqB,CAACT,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,EAAqB;AACxC,YAAM;AAAEC,QAAAA;AAAF,UAAWD,OAAjB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACD,KAfO;;AAgBRQ,IAAAA,sBAAsB,CAACZ,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,EAAqB;AACzC,YAAM;AAAEU,QAAAA;AAAF,UAASV,OAAf;AACA,aAAOH,KAAK,CAACc,MAAN,CAAaV,IAAI,IAAIA,IAAI,CAACS,EAAL,KAAYA,EAAjC,CAAP;AACD,KAnBO;;AAoBRE,IAAAA,oBAAoB,CAACf,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,EAAqB;AACvC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAcF,OAApB;AACA,aAAOH,KAAK,CAACgB,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC;AACA,YAAIA,KAAK,KAAKb,CAAd,EAAiB,OAAOY,KAAP,CAFgB,CAIjC;;AACA,iCACKA,KADL,MAEKb,IAFL;AAID,OATM,CAAP;AAUD;;AAhCO;AAHiB,CAAD,CAA5B;AAuCA,MAAM;AAAEe,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuB3B,QAA7B;AAEA,OAAO,MAAM;AACXI,EAAAA,mBADW;AAEXC,EAAAA,iBAFW;AAGXC,EAAAA,mBAHW;AAIXG,EAAAA,iBAJW;AAKXO,EAAAA,qBALW;AAMXG,EAAAA;AANW,IAOTO,OAPG,C,CASP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { loadingStart, loadingFailed } from 'utils/redux.loading';\nimport debugHand from 'debugData/debugHand.json';\n\nconst getInitialState = key => {\n  switch (key) {\n    case 'debug':\n      return debugHand;\n\n    default:\n      return [];\n  }\n};\n\nconst yourHand = createSlice({\n  name: 'yourHand',\n  initialState: getInitialState('debug'),\n  reducers: {\n    initYourHandFailure: loadingFailed,\n    initYourHandStart: loadingStart,\n    initYourHandSuccess: state => {\n      state.isLoading = false;\n    },\n    addCardToYourHand(state, { payload }) {\n      const { item, i } = payload;\n      let newArray = state.slice();\n      newArray.splice(i, 0, item);\n      return newArray;\n    },\n    playSpellFromYourHand(state, { payload }) {\n      const { item } = payload;\n      console.log(item);\n    },\n    removeCardFromYourHand(state, { payload }) {\n      const { id } = payload;\n      return state.filter(item => item.id !== id);\n    },\n    updateCardInYourHand(state, { payload }) {\n      const { item, i } = payload;\n      return state.map((entry, index) => {\n        // This isn't the entry we care about - keep it as-is\n        if (index !== i) return entry;\n\n        // Otherwise, this is the one we want - return an updated value\n        return {\n          ...entry,\n          ...item\n        };\n      });\n    }\n  }\n});\n\nconst { actions, reducer } = yourHand;\n\nexport const {\n  initYourHandFailure,\n  initYourHandStart,\n  initYourHandSuccess,\n  addCardToYourHand,\n  playSpellFromYourHand,\n  removeCardFromYourHand\n} = actions;\n\n// const fetchMapDroneImagesFromNeighborhoods = data => {\n//   return data;\n// }\n\n// export const initLayout = () => async dispatch => {\n//   try {\n//     dispatch(initLayoutStart());\n//     const footerHeight = await getFooterHeight();\n//     dispatch(initLayoutSuccess(footerHeight));\n//   } catch (err) {\n//     dispatch(initLayoutFailure(err));\n\n//     // recursive failure init\n//     setTimeout(() => {\n//       dispatch(initLayout());\n//     }, 2000);\n//   }\n// };\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}