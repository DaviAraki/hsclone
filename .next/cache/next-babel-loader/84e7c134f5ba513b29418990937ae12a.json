{"ast":null,"code":"var _jsxFileName = \"/Users/william.pansky/www/hsclone/src/features/layout/TheirBoard.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'; // import Minion from 'components/Minion/Minion.component';\n\nimport debugCards from 'debugData/debugCards.json';\nimport useDimensions from 'react-use-dimensions';\nimport { targetHovered, resetHoveredTarget } from 'features/targeting/targeting.slice';\n\nconst CanTargetTest = ({\n  children\n}) => {\n  const dispatch = useDispatch();\n  const {\n    enabled\n  } = useSelector(s => s.targeting);\n  const [cardRef, redRefProps] = useDimensions({\n    liveMeasure: true\n  });\n  const handleMouseEnter = React.useCallback(redRefProps => {\n    return dispatch(targetHovered(redRefProps));\n  }, [dispatch]);\n  const handleMouseLeave = React.useCallback(() => {\n    return dispatch(resetHoveredTarget());\n  }, [dispatch]);\n  return enabled ? __jsx(\"div\", {\n    ref: cardRef,\n    className: \"mechanics--can_target\",\n    onMouseEnter: () => handleMouseEnter(redRefProps),\n    onMouseLeave: () => handleMouseLeave(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, children) : __jsx(\"div\", {\n    ref: cardRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, children);\n};\n\nconst TheirBoard = ({\n  children\n}) => {\n  const {\n    boardHeight,\n    boardWidth\n  } = useSelector(s => s.layout);\n  const [{\n    canDrop,\n    isOver\n  }, drop] = useDrop({\n    accept: 'SPELL',\n    drop: () => ({\n      name: 'TheirBoard'\n    }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n  return boardHeight && boardWidth ? __jsx(Component, {\n    boardHeight: boardHeight,\n    boardWidth: boardWidth,\n    \"data-file\": \"TheirBoard\",\n    ref: drop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, children, debugCards.slice(0, 2).map(card => {\n    const {\n      artist,\n      attack,\n      cardClass,\n      collectible,\n      cost,\n      elite,\n      entourage,\n      flavor,\n      health,\n      hideStats,\n      howToEarn,\n      howToEarnGolden,\n      id,\n      images,\n      mechanics,\n      name,\n      playRequirements,\n      race,\n      rarity,\n      set,\n      sounds,\n      spellDamage,\n      targetingArrowText,\n      text,\n      type\n    } = card;\n    return __jsx(CanTargetTest, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  })) : null;\n};\n\nconst Component = styled.div`\n  align-items: center;\n  background: #333;\n  box-shadow: inset 0 0 10px transparent;\n  box-sizing: border-box;\n  display: flex;\n  flex-flow: row nowrap;\n  height: ${p => p.boardHeight ? `calc(${p.boardHeight}px / 2)` : `0px`};\n  justify-content: center;\n  margin: auto auto 0;\n  overflow: hidden;\n  width: ${p => p.boardWidth ? `${p.boardWidth}px` : `0px`};\n\n  & > div + div {\n    margin-left: 20px;\n  }\n`;\nTheirBoard.propTypes = {\n  children: PropTypes.node\n};\nexport default TheirBoard;","map":{"version":3,"sources":["/Users/william.pansky/www/hsclone/src/features/layout/TheirBoard.jsx"],"names":["React","useDrop","useSelector","useDispatch","PropTypes","styled","debugCards","useDimensions","targetHovered","resetHoveredTarget","CanTargetTest","children","dispatch","enabled","s","targeting","cardRef","redRefProps","liveMeasure","handleMouseEnter","useCallback","handleMouseLeave","TheirBoard","boardHeight","boardWidth","layout","canDrop","isOver","drop","accept","name","collect","monitor","slice","map","card","artist","attack","cardClass","collectible","cost","elite","entourage","flavor","health","hideStats","howToEarn","howToEarnGolden","id","images","mechanics","playRequirements","race","rarity","set","sounds","spellDamage","targetingArrowText","text","type","Component","div","p","propTypes","node"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n// import Minion from 'components/Minion/Minion.component';\nimport debugCards from 'debugData/debugCards.json';\nimport useDimensions from 'react-use-dimensions';\nimport {\n  targetHovered,\n  resetHoveredTarget\n} from 'features/targeting/targeting.slice';\n\nconst CanTargetTest = ({ children }) => {\n  const dispatch = useDispatch();\n  const { enabled } = useSelector(s => s.targeting);\n  const [cardRef, redRefProps] = useDimensions({\n    liveMeasure: true\n  });\n\n  const handleMouseEnter = React.useCallback(\n    redRefProps => {\n      return dispatch(targetHovered(redRefProps));\n    },\n    [dispatch]\n  );\n\n  const handleMouseLeave = React.useCallback(() => {\n    return dispatch(resetHoveredTarget());\n  }, [dispatch]);\n\n  return enabled ? (\n    <div\n      ref={cardRef}\n      className=\"mechanics--can_target\"\n      onMouseEnter={() => handleMouseEnter(redRefProps)}\n      onMouseLeave={() => handleMouseLeave()}\n    >\n      {children}\n    </div>\n  ) : (\n    <div ref={cardRef}>{children}</div>\n  );\n};\n\nconst TheirBoard = ({ children }) => {\n  const { boardHeight, boardWidth } = useSelector(s => s.layout);\n\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: 'SPELL',\n    drop: () => ({ name: 'TheirBoard' }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  return boardHeight && boardWidth ? (\n    <Component\n      boardHeight={boardHeight}\n      boardWidth={boardWidth}\n      data-file=\"TheirBoard\"\n      ref={drop}\n    >\n      {children}\n\n      {debugCards.slice(0, 2).map(card => {\n        const {\n          artist,\n          attack,\n          cardClass,\n          collectible,\n          cost,\n          elite,\n          entourage,\n          flavor,\n          health,\n          hideStats,\n          howToEarn,\n          howToEarnGolden,\n          id,\n          images,\n          mechanics,\n          name,\n          playRequirements,\n          race,\n          rarity,\n          set,\n          sounds,\n          spellDamage,\n          targetingArrowText,\n          text,\n          type\n        } = card;\n\n        return (\n          <CanTargetTest key={id}>\n            {/* <Minion\n              artist={artist}\n              attack={attack}\n              cardClass={cardClass}\n              collectible={collectible}\n              cost={cost}\n              elite={elite}\n              entourage={entourage}\n              flavor={flavor}\n              health={health}\n              hideStats={hideStats}\n              howToEarn={howToEarn}\n              howToEarnGolden={howToEarnGolden}\n              id={id}\n              images={images}\n              mechanics={mechanics}\n              name={name}\n              playRequirements={playRequirements}\n              race={race}\n              rarity={rarity}\n              set={set}\n              sounds={sounds}\n              spellDamage={spellDamage}\n              targetingArrowText={targetingArrowText}\n              text={text}\n              type={type}\n            /> */}\n          </CanTargetTest>\n        );\n      })}\n    </Component>\n  ) : null;\n};\n\nconst Component = styled.div`\n  align-items: center;\n  background: #333;\n  box-shadow: inset 0 0 10px transparent;\n  box-sizing: border-box;\n  display: flex;\n  flex-flow: row nowrap;\n  height: ${p => (p.boardHeight ? `calc(${p.boardHeight}px / 2)` : `0px`)};\n  justify-content: center;\n  margin: auto auto 0;\n  overflow: hidden;\n  width: ${p => (p.boardWidth ? `${p.boardWidth}px` : `0px`)};\n\n  & > div + div {\n    margin-left: 20px;\n  }\n`;\n\nTheirBoard.propTypes = {\n  children: PropTypes.node\n};\n\nexport default TheirBoard;\n"]},"metadata":{},"sourceType":"module"}