{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/william.pansky/www/hsclone/src/features/yourBoard/YourBoardCards.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  align-items: center;\\n  background: rgba(255, 255, 255, 0.25);\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  height: \", \";\\n  justify-content: center;\\n  margin: auto;\\n  position: relative;\\n  width: \", \";\\n\\n  & > div > article {\\n    animation-name: uk-fade-scale-18;\\n    animation-duration: 200ms;\\n    animation-timing-function: ease-out;\\n    animation-fill-mode: both;\\n  }\\n\\n  @keyframes uk-fade-scale-18 {\\n    0% {\\n      opacity: 0;\\n      transform: scale(1.8);\\n    }\\n\\n    100% {\\n      opacity: 1;\\n      transform: scale(1);\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { addCardToYourBoard } from 'features/yourBoard/yourBoard.slice';\nimport { playSpellFromYourHand, removeCardFromYourHand } from 'features/yourHand/yourHand.slice'; // import BoardDropArea from 'features/boards/BoardDropArea.component';\n\nimport BoardDropArea from 'systems/dropAreas/BoardDropArea';\nimport SingleDropArea from 'systems/dropAreas/SingleDropArea';\nimport AdjacentDropArea from 'systems/dropAreas/AdjacentDropArea';\nimport Card from 'components/Card/Card.component';\nimport CardTargetingLayer from 'features/targeting/CardTargetingLayer';\nimport Minion from 'components/Minion/Minion.component';\n\nvar YourBoard = function YourBoard() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (s) {\n    return s.layout;\n  }),\n      boardHeight = _useSelector.boardHeight,\n      boardWidth = _useSelector.boardWidth;\n\n  var yourBoard = useSelector(function (s) {\n    return s.yourBoard;\n  });\n  var dropCard = React.useCallback(function (object, index) {\n    var type = object.type;\n    var dispatchObj = {\n      item: object,\n      i: index\n    };\n    dispatch(removeCardFromYourHand(object));\n    return type === 'SPELL' ? dispatch(playSpellFromYourHand(dispatchObj)) : dispatch(addCardToYourBoard(dispatchObj));\n  }, [dispatch]);\n  var yourBoardLength = yourBoard && yourBoard.length;\n  return __jsx(Component, {\n    boardHeight: boardHeight,\n    boardWidth: boardWidth,\n    \"data-file\": \"YourBoardCards\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(BoardDropArea, {\n    dropSpell: dropCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, yourBoardLength === 0 ? __jsx(SingleDropArea, {\n    dropItem: dropCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) : __jsx(AdjacentDropArea, {\n    dropItem: dropCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), yourBoard.map(function (card, i) {\n    var artist = card.artist,\n        attack = card.attack,\n        cardClass = card.cardClass,\n        collectible = card.collectible,\n        cost = card.cost,\n        elite = card.elite,\n        entourage = card.entourage,\n        flavor = card.flavor,\n        health = card.health,\n        hideStats = card.hideStats,\n        howToEarn = card.howToEarn,\n        howToEarnGolden = card.howToEarnGolden,\n        id = card.id,\n        images = card.images,\n        mechanics = card.mechanics,\n        name = card.name,\n        playRequirements = card.playRequirements,\n        race = card.race,\n        rarity = card.rarity,\n        set = card.set,\n        sounds = card.sounds,\n        spellDamage = card.spellDamage,\n        targetingArrowText = card.targetingArrowText,\n        text = card.text,\n        type = card.type;\n    return __jsx(React.Fragment, {\n      key: \"React.Fragment_\".concat(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, __jsx(CardTargetingLayer, {\n      key: \"card_\".concat(id),\n      artist: artist,\n      attack: attack,\n      cardClass: cardClass,\n      collectible: collectible,\n      cost: cost,\n      elite: elite,\n      entourage: entourage,\n      flavor: flavor,\n      health: health,\n      hideStats: hideStats,\n      howToEarn: howToEarn,\n      howToEarnGolden: howToEarnGolden,\n      id: id,\n      images: images,\n      mechanics: mechanics,\n      name: name,\n      playRequirements: playRequirements,\n      race: race,\n      rarity: rarity,\n      set: set,\n      sounds: sounds,\n      spellDamage: spellDamage,\n      targetingArrowText: targetingArrowText,\n      text: text,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(Minion, {\n      artist: artist,\n      attack: attack,\n      cardClass: cardClass,\n      collectible: collectible,\n      cost: cost,\n      elite: elite,\n      entourage: entourage,\n      flavor: flavor,\n      health: health,\n      hideStats: hideStats,\n      howToEarn: howToEarn,\n      howToEarnGolden: howToEarnGolden,\n      id: id,\n      images: images,\n      mechanics: mechanics,\n      name: name,\n      playRequirements: playRequirements,\n      race: race,\n      rarity: rarity,\n      set: set,\n      sounds: sounds,\n      spellDamage: spellDamage,\n      targetingArrowText: targetingArrowText,\n      text: text,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), __jsx(AdjacentDropArea, {\n      key: \"dropArea_\".concat(i),\n      afterIndex: i,\n      dropItem: dropCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  })));\n};\n\nvar Component = styled.div(_templateObject(), function (p) {\n  return p.boardHeight ? \"calc(\".concat(p.boardHeight, \"px / 3)\") : \"0px\";\n}, function (p) {\n  return p.boardWidth ? \"calc(\".concat(p.boardWidth, \"px - 20%)\") : \"0px\";\n});\nexport default YourBoard;","map":{"version":3,"sources":["/Users/william.pansky/www/hsclone/src/features/yourBoard/YourBoardCards.jsx"],"names":["React","useSelector","useDispatch","PropTypes","styled","addCardToYourBoard","playSpellFromYourHand","removeCardFromYourHand","BoardDropArea","SingleDropArea","AdjacentDropArea","Card","CardTargetingLayer","Minion","YourBoard","dispatch","s","layout","boardHeight","boardWidth","yourBoard","dropCard","useCallback","object","index","type","dispatchObj","item","i","yourBoardLength","length","map","card","artist","attack","cardClass","collectible","cost","elite","entourage","flavor","health","hideStats","howToEarn","howToEarnGolden","id","images","mechanics","name","playRequirements","race","rarity","set","sounds","spellDamage","targetingArrowText","text","Component","div","p"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { addCardToYourBoard } from 'features/yourBoard/yourBoard.slice';\nimport {\n  playSpellFromYourHand,\n  removeCardFromYourHand\n} from 'features/yourHand/yourHand.slice';\n// import BoardDropArea from 'features/boards/BoardDropArea.component';\nimport BoardDropArea from 'systems/dropAreas/BoardDropArea';\nimport SingleDropArea from 'systems/dropAreas/SingleDropArea';\nimport AdjacentDropArea from 'systems/dropAreas/AdjacentDropArea';\nimport Card from 'components/Card/Card.component';\nimport CardTargetingLayer from 'features/targeting/CardTargetingLayer';\nimport Minion from 'components/Minion/Minion.component';\n\nconst YourBoard = () => {\n  const dispatch = useDispatch();\n  const { boardHeight, boardWidth } = useSelector(s => s.layout);\n  const yourBoard = useSelector(s => s.yourBoard);\n\n  const dropCard = React.useCallback(\n    (object, index) => {\n      const { type } = object;\n      const dispatchObj = {\n        item: object,\n        i: index\n      };\n\n      dispatch(removeCardFromYourHand(object));\n      return type === 'SPELL'\n        ? dispatch(playSpellFromYourHand(dispatchObj))\n        : dispatch(addCardToYourBoard(dispatchObj));\n    },\n    [dispatch]\n  );\n\n  const yourBoardLength = yourBoard && yourBoard.length;\n\n  return (\n    <Component\n      boardHeight={boardHeight}\n      boardWidth={boardWidth}\n      data-file=\"YourBoardCards\"\n    >\n      <BoardDropArea dropSpell={dropCard}>\n        {yourBoardLength === 0 ? (\n          <SingleDropArea dropItem={dropCard} />\n        ) : (\n          <AdjacentDropArea dropItem={dropCard} />\n        )}\n\n        {yourBoard.map((card, i) => {\n          const {\n            artist,\n            attack,\n            cardClass,\n            collectible,\n            cost,\n            elite,\n            entourage,\n            flavor,\n            health,\n            hideStats,\n            howToEarn,\n            howToEarnGolden,\n            id,\n            images,\n            mechanics,\n            name,\n            playRequirements,\n            race,\n            rarity,\n            set,\n            sounds,\n            spellDamage,\n            targetingArrowText,\n            text,\n            type\n          } = card;\n\n          return (\n            <React.Fragment key={`React.Fragment_${i}`}>\n              <CardTargetingLayer\n                key={`card_${id}`}\n                artist={artist}\n                attack={attack}\n                cardClass={cardClass}\n                collectible={collectible}\n                cost={cost}\n                elite={elite}\n                entourage={entourage}\n                flavor={flavor}\n                health={health}\n                hideStats={hideStats}\n                howToEarn={howToEarn}\n                howToEarnGolden={howToEarnGolden}\n                id={id}\n                images={images}\n                mechanics={mechanics}\n                name={name}\n                playRequirements={playRequirements}\n                race={race}\n                rarity={rarity}\n                set={set}\n                sounds={sounds}\n                spellDamage={spellDamage}\n                targetingArrowText={targetingArrowText}\n                text={text}\n                type={type}\n              >\n                <Minion\n                  artist={artist}\n                  attack={attack}\n                  cardClass={cardClass}\n                  collectible={collectible}\n                  cost={cost}\n                  elite={elite}\n                  entourage={entourage}\n                  flavor={flavor}\n                  health={health}\n                  hideStats={hideStats}\n                  howToEarn={howToEarn}\n                  howToEarnGolden={howToEarnGolden}\n                  id={id}\n                  images={images}\n                  mechanics={mechanics}\n                  name={name}\n                  playRequirements={playRequirements}\n                  race={race}\n                  rarity={rarity}\n                  set={set}\n                  sounds={sounds}\n                  spellDamage={spellDamage}\n                  targetingArrowText={targetingArrowText}\n                  text={text}\n                  type={type}\n                />\n              </CardTargetingLayer>\n\n              <AdjacentDropArea\n                key={`dropArea_${i}`}\n                afterIndex={i}\n                dropItem={dropCard}\n              />\n            </React.Fragment>\n          );\n        })}\n      </BoardDropArea>\n    </Component>\n  );\n};\n\nconst Component = styled.div`\n  align-items: center;\n  background: rgba(255, 255, 255, 0.25);\n  box-sizing: border-box;\n  display: flex;\n  flex-flow: row nowrap;\n  height: ${p => (p.boardHeight ? `calc(${p.boardHeight}px / 3)` : `0px`)};\n  justify-content: center;\n  margin: auto;\n  position: relative;\n  width: ${p => (p.boardWidth ? `calc(${p.boardWidth}px - 20%)` : `0px`)};\n\n  & > div > article {\n    animation-name: uk-fade-scale-18;\n    animation-duration: 200ms;\n    animation-timing-function: ease-out;\n    animation-fill-mode: both;\n  }\n\n  @keyframes uk-fade-scale-18 {\n    0% {\n      opacity: 0;\n      transform: scale(1.8);\n    }\n\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n`;\n\nexport default YourBoard;\n"]},"metadata":{},"sourceType":"module"}