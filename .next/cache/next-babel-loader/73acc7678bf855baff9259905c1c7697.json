{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { loadingStart, loadingFailed } from 'utils/redux.loading';\nimport debugHand from 'debugData/debugHand.json';\n\nvar getInitialState = function getInitialState(key) {\n  switch (key) {\n    case 'debug':\n      return debugHand;\n\n    default:\n      return [];\n  }\n};\n\nvar yourHand = createSlice({\n  name: 'yourHand',\n  initialState: getInitialState('debug'),\n  reducers: {\n    initYourHandFailure: loadingFailed,\n    initYourHandStart: loadingStart,\n    initYourHandSuccess: function initYourHandSuccess(state) {\n      state.isLoading = false;\n    },\n    addCardToYourHand: function addCardToYourHand(state, _ref) {\n      var payload = _ref.payload;\n      var item = payload.item,\n          i = payload.i;\n      var newArray = state.slice();\n      newArray.splice(i, 0, item);\n      return newArray;\n    },\n    playSpellFromYourHand: function playSpellFromYourHand(state, _ref2) {\n      var payload = _ref2.payload;\n      var item = payload.item;\n      console.log(item);\n    },\n    removeCardFromYourHand: function removeCardFromYourHand(state, _ref3) {\n      var payload = _ref3.payload;\n      var id = payload.id;\n      return state.filter(function (item) {\n        return item.id !== id;\n      });\n    },\n    updateCardInYourHand: function updateCardInYourHand(state, _ref4) {\n      var payload = _ref4.payload;\n      var item = payload.item,\n          i = payload.i;\n      return state.map(function (entry, index) {\n        // This isn't the entry we care about - keep it as-is\n        if (index !== i) return entry; // Otherwise, this is the one we want - return an updated value\n\n        return _objectSpread({}, entry, {}, item);\n      });\n    }\n  }\n});\nvar actions = yourHand.actions,\n    reducer = yourHand.reducer;\nvar initYourHandFailure = actions.initYourHandFailure,\n    initYourHandStart = actions.initYourHandStart,\n    initYourHandSuccess = actions.initYourHandSuccess,\n    addCardToYourHand = actions.addCardToYourHand,\n    playSpellFromYourHand = actions.playSpellFromYourHand,\n    removeCardFromYourHand = actions.removeCardFromYourHand; // const fetchMapDroneImagesFromNeighborhoods = data => {\n//   return data;\n// }\n// export const initLayout = () => async dispatch => {\n//   try {\n//     dispatch(initLayoutStart());\n//     const footerHeight = await getFooterHeight();\n//     dispatch(initLayoutSuccess(footerHeight));\n//   } catch (err) {\n//     dispatch(initLayoutFailure(err));\n//     // recursive failure init\n//     setTimeout(() => {\n//       dispatch(initLayout());\n//     }, 2000);\n//   }\n// };\n\nexport { initYourHandFailure, initYourHandStart, initYourHandSuccess, addCardToYourHand, playSpellFromYourHand, removeCardFromYourHand };\nexport default reducer;","map":{"version":3,"sources":["/Users/william.pansky/www/hsclone/src/features/yourHand/yourHand.slice.js"],"names":["createSlice","loadingStart","loadingFailed","debugHand","getInitialState","key","yourHand","name","initialState","reducers","initYourHandFailure","initYourHandStart","initYourHandSuccess","state","isLoading","addCardToYourHand","payload","item","i","newArray","slice","splice","playSpellFromYourHand","console","log","removeCardFromYourHand","id","filter","updateCardInYourHand","map","entry","index","actions","reducer"],"mappings":";;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,qBAA5C;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,GAAG,EAAI;AAC7B,UAAQA,GAAR;AACE,SAAK,OAAL;AACE,aAAOF,SAAP;;AAEF;AACE,aAAO,EAAP;AALJ;AAOD,CARD;;AAUA,IAAMG,QAAQ,GAAGN,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAE,UADqB;AAE3BC,EAAAA,YAAY,EAAEJ,eAAe,CAAC,OAAD,CAFF;AAG3BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAER,aADb;AAERS,IAAAA,iBAAiB,EAAEV,YAFX;AAGRW,IAAAA,mBAAmB,EAAE,6BAAAC,KAAK,EAAI;AAC5BA,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACD,KALO;AAMRC,IAAAA,iBANQ,6BAMUF,KANV,QAM8B;AAAA,UAAXG,OAAW,QAAXA,OAAW;AAAA,UAC5BC,IAD4B,GAChBD,OADgB,CAC5BC,IAD4B;AAAA,UACtBC,CADsB,GAChBF,OADgB,CACtBE,CADsB;AAEpC,UAAIC,QAAQ,GAAGN,KAAK,CAACO,KAAN,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgBH,CAAhB,EAAmB,CAAnB,EAAsBD,IAAtB;AACA,aAAOE,QAAP;AACD,KAXO;AAYRG,IAAAA,qBAZQ,iCAYcT,KAZd,SAYkC;AAAA,UAAXG,OAAW,SAAXA,OAAW;AAAA,UAChCC,IADgC,GACvBD,OADuB,CAChCC,IADgC;AAExCM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACD,KAfO;AAgBRQ,IAAAA,sBAhBQ,kCAgBeZ,KAhBf,SAgBmC;AAAA,UAAXG,OAAW,SAAXA,OAAW;AAAA,UACjCU,EADiC,GAC1BV,OAD0B,CACjCU,EADiC;AAEzC,aAAOb,KAAK,CAACc,MAAN,CAAa,UAAAV,IAAI;AAAA,eAAIA,IAAI,CAACS,EAAL,KAAYA,EAAhB;AAAA,OAAjB,CAAP;AACD,KAnBO;AAoBRE,IAAAA,oBApBQ,gCAoBaf,KApBb,SAoBiC;AAAA,UAAXG,OAAW,SAAXA,OAAW;AAAA,UAC/BC,IAD+B,GACnBD,OADmB,CAC/BC,IAD+B;AAAA,UACzBC,CADyB,GACnBF,OADmB,CACzBE,CADyB;AAEvC,aAAOL,KAAK,CAACgB,GAAN,CAAU,UAACC,KAAD,EAAQC,KAAR,EAAkB;AACjC;AACA,YAAIA,KAAK,KAAKb,CAAd,EAAiB,OAAOY,KAAP,CAFgB,CAIjC;;AACA,iCACKA,KADL,MAEKb,IAFL;AAID,OATM,CAAP;AAUD;AAhCO;AAHiB,CAAD,CAA5B;IAuCQe,O,GAAqB1B,Q,CAArB0B,O;IAASC,O,GAAY3B,Q,CAAZ2B,O;IAGfvB,mB,GAMEsB,O,CANFtB,mB;IACAC,iB,GAKEqB,O,CALFrB,iB;IACAC,mB,GAIEoB,O,CAJFpB,mB;IACAG,iB,GAGEiB,O,CAHFjB,iB;IACAO,qB,GAEEU,O,CAFFV,qB;IACAG,sB,GACEO,O,CADFP,sB,EAGF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeQ,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { loadingStart, loadingFailed } from 'utils/redux.loading';\nimport debugHand from 'debugData/debugHand.json';\n\nconst getInitialState = key => {\n  switch (key) {\n    case 'debug':\n      return debugHand;\n\n    default:\n      return [];\n  }\n};\n\nconst yourHand = createSlice({\n  name: 'yourHand',\n  initialState: getInitialState('debug'),\n  reducers: {\n    initYourHandFailure: loadingFailed,\n    initYourHandStart: loadingStart,\n    initYourHandSuccess: state => {\n      state.isLoading = false;\n    },\n    addCardToYourHand(state, { payload }) {\n      const { item, i } = payload;\n      let newArray = state.slice();\n      newArray.splice(i, 0, item);\n      return newArray;\n    },\n    playSpellFromYourHand(state, { payload }) {\n      const { item } = payload;\n      console.log(item);\n    },\n    removeCardFromYourHand(state, { payload }) {\n      const { id } = payload;\n      return state.filter(item => item.id !== id);\n    },\n    updateCardInYourHand(state, { payload }) {\n      const { item, i } = payload;\n      return state.map((entry, index) => {\n        // This isn't the entry we care about - keep it as-is\n        if (index !== i) return entry;\n\n        // Otherwise, this is the one we want - return an updated value\n        return {\n          ...entry,\n          ...item\n        };\n      });\n    }\n  }\n});\n\nconst { actions, reducer } = yourHand;\n\nexport const {\n  initYourHandFailure,\n  initYourHandStart,\n  initYourHandSuccess,\n  addCardToYourHand,\n  playSpellFromYourHand,\n  removeCardFromYourHand\n} = actions;\n\n// const fetchMapDroneImagesFromNeighborhoods = data => {\n//   return data;\n// }\n\n// export const initLayout = () => async dispatch => {\n//   try {\n//     dispatch(initLayoutStart());\n//     const footerHeight = await getFooterHeight();\n//     dispatch(initLayoutSuccess(footerHeight));\n//   } catch (err) {\n//     dispatch(initLayoutFailure(err));\n\n//     // recursive failure init\n//     setTimeout(() => {\n//       dispatch(initLayout());\n//     }, 2000);\n//   }\n// };\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}